; faststack Config
; ================
;
; Note:
;  * All values are case-insensitive.
;
;  * Values specified in ms are usually rounded up to the nearest multiple
;    of msPerTick.


[keybind]

rotateLeft = z
rotateRight = x
rotate180 = a
left = left
right = right
down = down
up = space
hold = c
quit = q
restart = rshift


[game]


; Which randomizer to use.
;
; simple    - Memoryless
; bag6      - Bag of length 6
; bag7      - Standard Bag (default)
; bag7-seam - Standard Bag \w Seam Check
; bag14     - Double bag
; bag28     - Quadruple bag
; bag63     - Nontuple bag
; tgm1      - TGM1
; tgm2      - TGM2
; tgm3      - TGM3
randomizer = bag7

; Which rotation system to use.
;
; simple    - Sega Rotation; No wallkicks
; sega      - Sega Rotation
; srs       - Super Rotation System (default)
; arikasrs  - SRS \w symmetric I wallkick
; tgm12     - Sega Rotation; Symmetric Wallkicks
; tgm3      - tgm12 \w I floorkicks
; dtet      - Sega Rotation; Simple Symmetric Wallkicks
rotationSystem = srs

; How many blocks gravity will cause the piece to fall every ms.
;
; To convert G's to this form, divide input by 17 and multiply by 10e6.
; i.e. 20G = 20 / 17 * 1000000 = 1127000.
gravity = 625

; How many blocks soft drop will cause the piece to fall every ms.
; (multiplied by 10e6).
softDropGravity = 5000000

; Delay (in ms) between piece placement and piece spawn.
areDelay = 0

; Whether ARE delay be cancelled on user input.
areCancellable = true

; Delay (in ms) before a piece begins to auto shift.
dasDelay = 150

; Number of blocks to move per ms during DAS (0 = infinite)
dasSpeed = 0

; Delay (in ms) before a piece locks.
lockDelay = 150

; How many floorkicks can be performed before the piece locks. (0 = infinite)
floorkickLimit = 1

; Behaviour used for initial actions (IRS/IHS).
;
; none       - IRS/IHS disabled (default)
; persistent - Triggered solely by current keystate
; trigger    - Explicit new event required (unimplemented)
initialActionStyle = none

; Behaviour used for lock reset.
;
; entry      - Reset only on new piece spawn
; step       - Reset on downward movement
; move       - Reset on any succssful movement/rotation (default)
lockStyle = move

; Whether soft drop is held through new piece spawns.
;
; Note: The current implementation only works properly with 'softDropGravity'
; set to instant (above 2).
oneShotSoftDrop = true

; Length of a single game tick.
msPerTick = 8

; Period at which the draw phase is performed.
ticksPerDraw = 2

; Width of the play field.
fieldWidth = 10

; Height of the playfield.
fieldHeight = 22

; Number of hidden rows
fieldHidden = 2

; Whether we can hold as many times as we want during pre-game.
infiniteReadyGoHold = true

; Length (in ms) of the Ready phase.
readyPhaseLength = 833

; Length (in ms) of the Go phase.
goPhaseLength = 833

; Number of preview pieces to display (max 4).
nextPieceCount = 5

; Target number of lines to clear.
goal = 40


[frontend.sdl2]

; Width of the display window
width = 800

; Height of the display window
height = 600

; Show the debug screen during execution
showDebug = false


[frontend.terminal]

; Glyphs to use when drawing to screen
;
; ascii   - Use only characters only from the ascii charset (default)
; unicode - Use unicode box-drawing chars for borders
glyphs = unicode

; Center the field in the middle of the window.
;
; If not set, the field will be drawn from the top-left corner of the screen.
centerField = true
