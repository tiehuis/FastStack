///
// fsControl.h
//
// Converts a set of virtual key inputs to game actions.
//
// This reduces the simplicity of the main game tick by transferring most
// of the input timing complexities into a seperate function. Current
// keyboard state and options are stored in an 'FSControl' struct.
///

#ifndef FS_CONTROL_H
#define FS_CONTROL_H

#include "fsCore.h"

///
// Implementation in fsEngine.c.
struct FSEngine;

///
// Special input flags.
//
// These label special actions which are understood by the engine.
enum InputExtraFlag {
    /// A hard drop action.
    FST_INPUT_HARD_DROP = 0x01,

    /// A hold action.
    FST_INPUT_HOLD      = 0x02,

    /// A locking action.
    FST_INPUT_LOCK      = 0x04,

    /// Action indicating a quit event was received.
    FST_INPUT_QUIT      = 0x08,

    /// Action indicating a restart event was received.
    FST_INPUT_RESTART   = 0x10
};

///
// A virtual key index.
//
// We require an index specifically for ease of use when processing virtual
// key input definitions from a configuration file.
///
enum VirtualKeyIndex {
    FST_VK_UP,
    FST_VK_DOWN,
    FST_VK_LEFT,
    FST_VK_RIGHT,
    FST_VK_ROTL,
    FST_VK_ROTR,
    FST_VK_ROTH,
    FST_VK_HOLD,
    FST_VK_START,
    FST_VK_RESTART,
    FST_VK_QUIT,
    FST_VK_COUNT
};

///
// A virtual key flag representing an input state.
///
enum VirtualKey {
    FST_VK_FLAG_UP      = (1 << FST_VK_UP),
    FST_VK_FLAG_DOWN    = (1 << FST_VK_DOWN),
    FST_VK_FLAG_LEFT    = (1 << FST_VK_LEFT),
    FST_VK_FLAG_RIGHT   = (1 << FST_VK_RIGHT),
    FST_VK_FLAG_ROTL    = (1 << FST_VK_ROTL),
    FST_VK_FLAG_ROTR    = (1 << FST_VK_ROTR),
    FST_VK_FLAG_ROTH    = (1 << FST_VK_ROTH),
    FST_VK_FLAG_HOLD    = (1 << FST_VK_HOLD),
    FST_VK_FLAG_START   = (1 << FST_VK_START),
    FST_VK_FLAG_RESTART = (1 << FST_VK_RESTART),
    FST_VK_FLAG_QUIT    = (1 << FST_VK_QUIT)
};

///
// Manages external input.
//
// This processes all the complicated timing required for things such as DAS.
///
typedef struct FSControl {
    /// @I: State of input device last tick.
    u32 lastKeys;

    /// @I: Current state of input device.
    u32 currentKeys;

    /// @I: Number of ticks DAS has occurred for.
    i32 dasCounter;
} FSControl;

/// TODO: Insert options into engine and put this definition into the engine itself.
/// Repurpose the input code so it is managed internally within an engine.

///
// Represents a simple set of actions `FSEngine` can understand.
//
// This is the target translation generated by `FSControl`.
///
typedef struct FSInput {
    /// A Rotation action.
    //
    //  * Constraints
    //      One of 'RotationAmount' (in fsEngine.h)
    i8 rotation;

    /// A left-right movement action.
    //
    // Positive movement indicates a right move, whilst negative is left.
    i8 movement;

    /// Downward movement action. Product of gravity and soft drop.
    i8 gravity;

    /// Specific extra movement (e.g. HardDrop).
    i8 extra;

    /// How many new keys were pressed (used for finesse/KPT)
    i8 newKeysCount;

    /// Current key status (used for some specific events)
    u32 currentKeys;
} FSInput;


///
// Transforms virtual key input to specific actions using an FSControl instance.
//
//  * FSInput *dst
//      FSInput structure to fill with the calculated actions.
//
//  * u32 keys
//      Current keystate.
//
//  * const FSEngine *f
//      Game instance to use options from.
//
//  * FSControl *c
//      Control structure to use for calculating target actions.
///
void fsVirtualKeysToInput(FSInput *dst, u32 keys, const struct FSEngine *f, FSControl *c);

#endif // FS_CONTROL_H
