///
// fsControl.h
//
// Converts a set of virtual key inputs to game actions.
//
// This reduces the simplicity of the main game tick by transferring most
// of the input timing complexities into a seperate function. Current
// keyboard state and options are stored in an 'FSControl' struct.
///

#ifndef FSCONTROL_H
#define FSCONTROL_H

#include "fsTypes.h"

///
// Implementation in fs.c.
struct FSGame;

///
// Special input flags.
//
// These label special actions which are understood by the engine.
enum InputExtraFlag {
    /// A hard drop action.
    FSI_HARD_DROP = 0x1,

    /// A hold action.
    FSI_HOLD      = 0x2,

    /// A locking action.
    FSI_LOCK      = 0x4,

    /// Action indicating a new directional keypress.
    FSI_FINESSE_DIRECTION = 0x8,

    /// Action indicating a new rotation keypress.
    FSI_FINESSE_ROTATION  = 0x10
};

///
// A virtual key index.
//
// We require an index specifically for ease of use when processing virtual
// key input definitions from a configuration file.
///
enum VirtualKeyIndex {
    VKEYI_UP,
    VKEYI_DOWN,
    VKEYI_LEFT,
    VKEYI_RIGHT,
    VKEYI_ROTL,
    VKEYI_ROTR,
    VKEYI_ROTH,
    VKEYI_HOLD,
    VKEYI_START,
    VKEY_COUNT
};

///
// A virtual key flag representing an input state.
///
enum VirtualKey {
    VKEY_UP    = (1 << VKEYI_UP),
    VKEY_DOWN  = (1 << VKEYI_DOWN),
    VKEY_LEFT  = (1 << VKEYI_LEFT),
    VKEY_RIGHT = (1 << VKEYI_RIGHT),
    VKEY_ROTL  = (1 << VKEYI_ROTL),
    VKEY_ROTR  = (1 << VKEYI_ROTR),
    VKEY_ROTH  = (1 << VKEYI_ROTH),
    VKEY_HOLD  = (1 << VKEYI_HOLD),
    VKEY_START = (1 << VKEYI_START)
};

///
// Manages external input.
//
// This processes all the complicated timing required for things such as DAS.
///
typedef struct FSControl {
    /// @I: State of input device last tick.
    FSBits lastKeys;

    /// @I: Current state of input device.
    FSBits currentKeys;

    /// @E: Number of keypresses in total.
    FSLong presses;

    /// @O: How many blocks a piece moves per ms.
    FSInt dasSpeed;

    /// @O: Number of ms a key must be held before repeated movement.
    FSLong dasDelay;

    /// @I: Number of ticks DAS has occurred for.
    FSLong dasCounter;
} FSControl;

///
// Represents a simple set of actions `FSGame` can understand.
//
// This is the target translation generated by `FSControl`.
///
typedef struct FSInput {
    /// A Rotation action.
    //
    //  * Constraints
    //      One of 'RotationAmount' (in fs.h)
    FSInt rotation;

    /// A left-right movement action.
    //
    // Positive movement indicates a right move, whilst negative is left.
    FSInt movement;

    /// Downward movement action. Product of gravity and soft drop.
    FSInt gravity;

    /// Specific extra movement (e.g. HardDrop).
    FSInt extra;

    /// Current key status (used for some specific events)
    FSBits currentKeys;
} FSInput;


///
// Transforms virtual key input to specific actions using an FSControl instance.
//
//  * FSInput *dst
//      FSInput structure to fill with the calculated actions.
//
//  * FSBits keys
//      Current keystate.
//
//  * const FSGame *f
//      Game instance to use options from.
//
//  * FSControl *c
//      Control structure to use for calculating target actions.
///
void fsVirtualKeysToInput(FSInput *dst, FSBits keys, const struct FSGame *f, FSControl *c);

#endif
